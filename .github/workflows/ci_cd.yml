name: Build and Deploy Docker Image  # 워크플로우의 이름을 지정

on:
  push:  # 이 워크플로우가 트리거되는 이벤트를 정의
    branches:
      - main  # main 브랜치에 푸시 또는 병합할 때 트리거 됨

jobs:
  build-and-deploy:  # 작업의 이름을 정의합니다.
    runs-on: ubuntu-latest  # 이 작업이 실행될 가상 환경을 Ubuntu 최신 버전으로 설정

    steps: # 작업의 순서를 지정
      - name: Checkout code  # 이 단계의 이름을 지정
        uses: actions/checkout@v3  # GitHub 리포지토리의 코드를 체크아웃

      - name: Set up Docker Buildx  # 이 단계의 이름을 지정
        uses: docker/setup-buildx-action@v2  # Docker Buildx를 설정하여 멀티 플랫폼 빌드를 지원

      - name: Build Docker image  # 이 단계의 이름을 지정
        uses: docker/build-push-action@v3  # Docker 이미지를 빌드하고 푸시
        with:
          context: .  # 빌드할 파일의 컨텍스트를 현재 디렉토리로 설정
          file: Dockerfile  # 사용할 Dockerfile의 경로를 지정
          push: true  # Docker 이미지를 Docker Hub에 푸시
          tags: starbucks-application:latest  # Docker Hub에 푸시할 이미지의 태그를 지정

      - name: Deploy to AWS EC2  # 이 단계의 이름을 지정
        env:  # 환경 변수를 설정
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # GitHub Secrets에서 SSH 개인 키를 가져옴
          HOST: ${{ secrets.EC2_HOST }}  # GitHub Secrets에서 EC2 인스턴스의 호스트를 가져옴
          USER: ${{ secrets.EC2_USER }}  # GitHub Secrets에서 EC2 인스턴스의 사용자명을 가져옴
        run: |  # 셸 명령을 실행할 블록을 시작
          echo "$SSH_PRIVATE_KEY" > private_key.pem  # SSH 개인 키를 파일로 저장
          chmod 600 private_key.pem  # 개인 키 파일의 권한을 설정

          ssh -i private_key.pem $USER@$HOST << 'EOF'  # SSH를 사용하여 EC2 인스턴스에 접속
            docker pull tmdduq1999/spring:latest  # Docker Hub에서 최신 이미지를 풀어옴

            docker stop starbucks-application || true  # 실행 중인 컨테이너를 정지, 실패해도 무시함
            docker rm starbucks-application || true  # 정지된 컨테이너를 제거, 실패해도 무시함

            docker run -d --name starbucks-application -p 8080:8080 tmdduq1999/spring:latest  # 새 Docker 컨테이너를 백그라운드에서 실행
          EOF  # SSH 접속 종료
